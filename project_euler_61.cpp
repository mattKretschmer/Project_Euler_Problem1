// ---------- Cyclical figurate numbers

/* 		-- Problem Statement --

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

*/

#include <iostream>
#include <vector>


bool test( int a, int b);
bool find_chain(int start, int length);

std::vector<int> temp,sol(6,0);
std::vector< std::vector<int> > nums;

int main()
{
for(int i = 0;i<6;i++)nums.push_back(temp);
for(int n = 1;n<=500;n++)
{
	if(n*(n+1)/2 >=1000 && n*(n+1)/2<10000)nums[0].push_back(n*(n+1)/2);	
	if(n*n >=1000 && n*n<10000)nums[1].push_back(n*n);
	if(n*(3*n-1)/2 >=1000 && n*(3*n-1)/2<10000)nums[2].push_back(n*(3*n-1)/2);
	if(n*(2*n-1) >=1000 && n*(2*n-1)<10000)nums[3].push_back( n*(2*n-1) );
	if(n*(5*n-3)/2 >=1000 && n*(5*n-3)/2<10000)nums[4].push_back( n*(5*n-3)/2 );
	if(n*(3*n-2) >=1000 && n*(3*n-2)<10000)nums[5].push_back( n*(3*n-2) );
}
for( int i = 0;i<nums[0].size();i++)
{
	sol[0]= nums[0][i];
	if(find_chain(0,1) ) break;
	
}
int sum = 0;
for(int i = 0;i<sol.size();i++)
{
	sum+=sol[i];
}


for(int i = 0;i<6;i++)std::cout<<sol[i]<<" ";
std::cout<<std::endl;
std::cout<<sum<<std::endl;
// for(std::vector<int>::const_iterator i = (nums[1]).begin();i!=(nums[1]).end();i++)std::cout<<*i<<std::endl;


// std::cout<<4567<<" "<<4567/100<<" "<<4567%100<<std::endl;
	return 0;
}
bool test( int a, int b)
{
	bool t_f = false;
		if(a%100 == b/100 && a!=b)t_f =true;
	return t_f;
}
//Recursive function.  First, finds a new (appropriate) number.  Then if the first 2 digits of this new number = the last two fo the place before, we add it.  If we've found another 5 numbers, we check to make sure the first two of element 0 equal the last two of the new element.  
bool find_chain(int start, int length ) //(5,1)
{
	int sol_size = sol.size();
    for (int i = 0; i < sol_size; i++) 
    {
        if (sol[i] != 0) continue;
        for (int j = 0; j < nums[i].size(); j++) 
        {
 
            bool unique = true;
            for(int k = 0; k < sol_size; k++)
            {
                if (nums[i][j] == sol[k]) 
                {
                    unique = false;
                    break;
                }
            }
 
            if ( unique && nums[i][j] / 100 == sol[ start] % 100) 
            {
                sol[i] = nums[i][j];
                if ( length == 5) 
                {
                    if (sol[0] / 100 == sol[i] % 100)
                        return true;
                }
                if (find_chain(i,length+1)) return true;
            }
        }
        sol[i] = 0;
    }
    return false;
}